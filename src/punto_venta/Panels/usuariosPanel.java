/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package punto_venta.Panels;
import  constructor.constructor;
import constructor.constructor.ResultadoVendedor;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import constructor.constructor.ResultadoVendedor;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import conexionDB.conexionDB;
import java.awt.Component;

/**
 *
 * @author israe
 */
public class usuariosPanel extends javax.swing.JPanel {

    /**
     * Creates new form usuariosPanel
     */
    public usuariosPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAgregaUsuarios = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnMuestraTodo = new javax.swing.JButton();

        bg.setBackground(new java.awt.Color(0, 0, 0));
        bg.setPreferredSize(new java.awt.Dimension(750, 460));

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Empleado", "Nombres", "Primer apellido", "Segundo apellido", "Correo", "Telefono", "contraseña", "Tipo Uusario"
            }
        ));
        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaUsuarios);

        jLabel1.setText("DAR DE ALTA A UN NUEVO VENDEDOR");

        btnAgregaUsuarios.setText("agrega");
        btnAgregaUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaUsuariosActionPerformed(evt);
            }
        });

        btnEditar.setText("editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnMuestraTodo.setText("mostrar todo");
        btnMuestraTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMuestraTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnAgregaUsuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(151, 151, 151)
                        .addComponent(btnMuestraTodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(297, 297, 297))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregaUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMuestraTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregaUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaUsuariosActionPerformed
                                                       
    String nombres, apellidoPaterno, apellidoMaterno, correo, telefono, contrasenia, tipoUser;

    constructor agregaUsuario = new constructor();

    // Solicitar nombre (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    nombres = JOptionPane.showInputDialog(null, "Por favor ingresa solo los nombres:");
    if (nombres == null || nombres.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar apellido paterno (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    apellidoPaterno = JOptionPane.showInputDialog(null, "Por favor ingresa apellido Paterno:");
    if (apellidoPaterno == null || apellidoPaterno.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar apellido materno (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    apellidoMaterno = JOptionPane.showInputDialog(null, "Por favor ingresa apellido Materno:");
    if (apellidoMaterno == null || apellidoMaterno.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }
    
    // Solicitar correo (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    correo = JOptionPane.showInputDialog(null, "Por favor ingresa tu correo");
    if (correo == null || apellidoMaterno.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }
    

    // Solicitar teléfono (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    telefono = JOptionPane.showInputDialog(null, "Por favor ingresa Numero de telefono:");
    if (telefono == null || telefono.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Eliminar los espacios en blanco y guiones del número de teléfono
    String telefonoSinFormato = telefono.replaceAll("\\s+", "").replaceAll("-", "");

    // Solicitar contraseña (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    contrasenia = JOptionPane.showInputDialog(null, "Por favor ingresa una contraseña:");
    if (contrasenia == null || contrasenia.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Array de opciones para el JComboBox
    String[] opciones = {"VENDEDOR", "ADMINISTRADOR"};

    // Mostrar diálogo para seleccionar el tipo de vendedor (se seguirá solicitando hasta que se seleccione una opción válida o se cancele)
    tipoUser = (String) JOptionPane.showInputDialog(
            null,
            "Por favor selecciona el tipo de vendedor:",
            "Tipo de Vendedor",
            JOptionPane.PLAIN_MESSAGE,
            null,
            opciones,
            opciones[0]);
    if (tipoUser == null) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Mostrar los detalles ingresados por el usuario
    JOptionPane.showMessageDialog(null,
            "Nombre: " + nombres +
                    "\nApellido Paterno: " + apellidoPaterno +
                    "\nApellido Materno: " + apellidoMaterno +
                    "\nTeléfono: " + telefono +
                    "\nContraseña: " + contrasenia +
                    "\nTipo de Vendedor: " + tipoUser,
            "Detalles del Usuario",
            JOptionPane.INFORMATION_MESSAGE);

    // Llamar al método que agrega un vendedor a la base de datos
    agregaUsuario.agregaVendedor(nombres, apellidoPaterno, apellidoMaterno,correo, telefonoSinFormato, contrasenia, tipoUser);

  


         
    }//GEN-LAST:event_btnAgregaUsuariosActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
    constructor editarUsuario = new constructor(); 
    // Solicitar la ID del usuario a editar
     String idUsuario; // Variable para almacenar el ID del usuario a editar
    String nombres, apellidoPaterno, apellidoMaterno, correo, telefono, contrasenia, tipoUser;

    constructor agregaUsuario = new constructor();

    // Solicitar el ID del usuario a editar
    idUsuario = JOptionPane.showInputDialog(null, "Por favor ingresa el ID del usuario a editar:");
    if (idUsuario == null || idUsuario.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar nombre (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    nombres = JOptionPane.showInputDialog(null, "Por favor ingresa solo los nombres:");
    if (nombres == null || nombres.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar apellido paterno (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    apellidoPaterno = JOptionPane.showInputDialog(null, "Por favor ingresa apellido Paterno:");
    if (apellidoPaterno == null || apellidoPaterno.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar apellido materno (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    apellidoMaterno = JOptionPane.showInputDialog(null, "Por favor ingresa apellido Materno:");
    if (apellidoMaterno == null || apellidoMaterno.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }
    
    // Solicitar correo (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    correo = JOptionPane.showInputDialog(null, "Por favor ingresa tu correo");
    if (correo == null || correo.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Solicitar teléfono (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    telefono = JOptionPane.showInputDialog(null, "Por favor ingresa Numero de telefono:");
    if (telefono == null || telefono.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Eliminar los espacios en blanco y guiones del número de teléfono
    String telefonoSinFormato = telefono.replaceAll("\\s+", "").replaceAll("-", "");

    // Solicitar contraseña (se seguirá solicitando hasta que se ingrese un valor no vacío o se cancele)
    contrasenia = JOptionPane.showInputDialog(null, "Por favor ingresa una contraseña:");
    if (contrasenia == null || contrasenia.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Array de opciones para el JComboBox
    String[] opciones = {"VENDEDOR", "ADMINISTRADOR"};

    // Mostrar diálogo para seleccionar el tipo de vendedor (se seguirá solicitando hasta que se seleccione una opción válida o se cancele)
    tipoUser = (String) JOptionPane.showInputDialog(
            null,
            "Por favor selecciona el tipo de vendedor:",
            "Tipo de Vendedor",
            JOptionPane.PLAIN_MESSAGE,
            null,
            opciones,
            opciones[0]);
    if (tipoUser == null) {
        JOptionPane.showMessageDialog(null, "Operación cancelada");
        return;
    }

    // Mostrar los detalles ingresados por el usuario
    JOptionPane.showMessageDialog(null,
            "Nombre: " + nombres +
                    "\nApellido Paterno: " + apellidoPaterno +
                    "\nApellido Materno: " + apellidoMaterno +
                    "\nTeléfono: " + telefono +
                    "\nContraseña: " + contrasenia +
                    "\nTipo de Vendedor: " + tipoUser,
            "Detalles del Usuario",
            JOptionPane.INFORMATION_MESSAGE);

    // Llamar al método que agrega o actualiza un vendedor en la base de datos
    editarUsuario.editaInfoDeVendedor(idUsuario, nombres, apellidoPaterno, apellidoMaterno, correo, telefonoSinFormato, contrasenia, tipoUser);


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnMuestraTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMuestraTodoActionPerformed
   constructor AllUsers = new constructor();
    Icon iconoPersonalizado = new ImageIcon(getClass().getResource("/iconos/personas.png"));

    // Mostrar el JOptionPane con el botón
    Object[] message = {
        "Haz clic para buscar todos los vendedores"
    };

    int option = JOptionPane.showOptionDialog(null, message, "Buscar Todos los Vendedores",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, iconoPersonalizado, null, null);

    // Si el usuario presiona "OK", realizar la búsqueda
    if (option == JOptionPane.OK_OPTION) {
        // Llamar al método de búsqueda de todos los vendedores
        Map<String, Object> resultadoMap = AllUsers.verTodosLosVendedores();
        
        // Obtener la lista de resultados y el total de vendedores del Map
        List<ResultadoVendedor> resultados = (List<ResultadoVendedor>) resultadoMap.get("resultados");
        double totalVendedores = (double) resultadoMap.get("totalVendedores");

        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tablaUsuarios.getModel();

        // Limpiar el modelo actual
        model.setRowCount(0);

        // Agregar filas con los resultados a la tabla
        for (ResultadoVendedor resultado : resultados) {
            Object[] fila = {
                resultado.getId(),
                resultado.getNombres(),
                resultado.getApellidoPaterno(),
                resultado.getApellidoMaterno(),
                resultado.getCorreo(),
                resultado.getTelefono(),
                resultado.getContrasena(), // Agrega la contraseña
                resultado.getTipoUsuario()
            };
            model.addRow(fila);
        }
    }
    }//GEN-LAST:event_btnMuestraTodoActionPerformed

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaUsuariosMouseClicked
    int filaSeleccionada = tablaUsuarios.getSelectedRow();
    int columnaSeleccionada = tablaUsuarios.getSelectedColumn();

    if (evt.getButton() == MouseEvent.BUTTON1) {
        // Click izquierdo
        if (filaSeleccionada != -1 && columnaSeleccionada != -1) {
            // Seleccionar la fila
            tablaUsuarios.setRowSelectionInterval(filaSeleccionada, filaSeleccionada);
        }
    } else if (evt.getButton() == MouseEvent.BUTTON3) {
        // Click derecho
        if (filaSeleccionada != -1) {
            String idUsuario = tablaUsuarios.getValueAt(filaSeleccionada, 0).toString();
            constructor eliminaUsuario = new constructor();
            boolean tieneVentas = verificarVentasAsociadas(idUsuario);

            if (tieneVentas) {
                // El vendedor tiene ventas, preguntar si se desea cambiar su tipo de usuario a "INACTIVO"
                int respuestaVentas = JOptionPane.showConfirmDialog(null, "Este usuario realizó ventas. ¿Desea cambiar su tipo de usuario a inactivo?",
                        "Usuario con ventas", JOptionPane.YES_NO_OPTION);
                if (respuestaVentas == JOptionPane.YES_OPTION) {
                    // Cambiar el tipo de usuario a "INACTIVO"
                    eliminaUsuario.eliminarVendedor(idUsuario, "INACTIVO");
                } else {
                    // Operación cancelada
                    return;
                }
            } else {
                // No tiene ventas, preguntar si se desea eliminar directamente
                int respuestaEliminar = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar este usuario?",
                        "Eliminar usuario", JOptionPane.YES_NO_OPTION);
                if (respuestaEliminar == JOptionPane.YES_OPTION) {
                    // Eliminar el usuario
                    eliminarUsuario(idUsuario);
                } else {
                    // Operación cancelada
                    return;
                }
            }
        }
    }
    }//GEN-LAST:event_tablaUsuariosMouseClicked

private void eliminarUsuario(String idUsuario) {
      constructor eliminaUsuario = new constructor();

    // Verificar si el vendedor tiene ventas asociadas
    boolean tieneVentas = verificarVentasAsociadas(idUsuario);

    if (tieneVentas) {
        // El vendedor tiene ventas, mostrar mensaje de advertencia
        int respuesta = JOptionPane.showConfirmDialog(null, "Este vendedor tiene ventas asociadas. ¿Desea cambiar su tipo de usuario a inactivo?",
                "Vendedor con ventas", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            // Cambiar el tipo de usuario a "INACTIVO"
            eliminaUsuario.eliminarVendedor(idUsuario, "INACTIVO");
        } else {
            JOptionPane.showMessageDialog(null, "Operación cancelada");
        }
    } else {
        // No tiene ventas, preguntar si se desea eliminar directamente
        int respuestaEliminar = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar este usuario?",
                "Eliminar usuario", JOptionPane.YES_NO_OPTION);
        if (respuestaEliminar == JOptionPane.YES_OPTION) {
            // Eliminar el usuario
            eliminaUsuario.eliminarVendedor(idUsuario,"INACTIVO");
        } else {
            JOptionPane.showMessageDialog(null, "Operación cancelada");
        }
    }
}

private boolean verificarVentasAsociadas(String idUsuario) {
    // Lógica para verificar si el usuario tiene ventas asociadas
    // Retorna true si tiene ventas, de lo contrario, false
    return false; // Cambiar esto con tu lógica real de verificación
}
  




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnAgregaUsuarios;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnMuestraTodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaUsuarios;
    // End of variables declaration//GEN-END:variables
}
